mcp:
  description: |
    Docker and Container Diagnostics Toolkit providing read-only access to container
    environments, status, and performance metrics. This toolkit helps users and
    administrators troubleshoot container issues, monitor resource usage, check
    logs, and inspect container configuration through safe, non-destructive commands
    that don't modify the container environment.
  run:
    shell: bash
  tools:
    - name: "docker_overview"
      description: "Show overview of Docker environment and running containers"
      run:
        command: |
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Error: Docker is not installed or not in the PATH."
            exit 1
          fi
          
          # Check if Docker daemon is running
          if ! docker info &> /dev/null; then
            echo "Error: Docker daemon is not running or you don't have permission to connect."
            echo "Try running 'sudo systemctl start docker' or check Docker Desktop on macOS/Windows."
            exit 1
          fi
          
          echo "Docker Version:"
          docker version
          
          echo -e "\nDocker Info:"
          docker info | grep -v "WARNING"
          
          echo -e "\nRunning Containers:"
          docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}\t{{.Ports}}"
          
          echo -e "\nContainer Count:"
          echo "Running: $(docker ps -q | wc -l)"
          echo "All: $(docker ps -a -q | wc -l)"
          
          echo -e "\nImages:"
          docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}\t{{.Size}}" | head -15
      output:
        prefix: "Docker Environment Overview:"

    - name: "container_stats"
      description: "Show resource usage statistics for running containers"
      params:
        container:
          type: string
          description: "Container name or ID (optional, shows all if not specified)"
        stats_count:
          type: number
          description: "Number of stats snapshots to collect (1-5)"
      constraints:
        - "container == '' || container.matches('^[a-zA-Z0-9_.-]+$')"   # Safe container name/ID chars
        - "container.size() <= 64"                                      # Max container ID length
        - "int(stats_count) == 0 || (int(stats_count) >= 1 && int(stats_count) <= 5)"  # Reasonable stats count
      run:
        command: |
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Error: Docker is not installed or not in the PATH."
            exit 1
          fi
          
          # Set defaults
          STATS_COUNT=1
          CONTAINER_FILTER=""
          
          if [ -n "{{ .container }}" ]; then
            CONTAINER_FILTER="{{ .container }}"
            
            # Verify container exists
            if ! docker ps -a --format "{{.Names}}:{{.ID}}" | grep -q "$CONTAINER_FILTER"; then
              echo "Error: Container '$CONTAINER_FILTER' not found."
              echo "Available containers:"
              docker ps -a --format "table {{.Names}}\t{{.ID}}\t{{.Status}}"
              exit 1
            fi
          fi
          
          if [ {{ .stats_count }} -gt 0 ]; then
            STATS_COUNT={{ .stats_count }}
          fi
          
          if [ -n "$CONTAINER_FILTER" ]; then
            echo "Stats for container: $CONTAINER_FILTER (taking $STATS_COUNT samples)"
            # Collect stats for specific container
            docker stats --no-stream "$CONTAINER_FILTER"
            
            # If multiple stats samples requested
            if [ $STATS_COUNT -gt 1 ]; then
              for i in $(seq 2 $STATS_COUNT); do
                echo -e "\nSample $i:"
                sleep 2
                docker stats --no-stream "$CONTAINER_FILTER"
              done
            fi
            
            echo -e "\nContainer details:"
            docker inspect --format "{{.State.Status}}: {{.Config.Image}} (Created: {{.Created}})" "$CONTAINER_FILTER"
            echo "Network mode: $(docker inspect --format '{{.HostConfig.NetworkMode}}' "$CONTAINER_FILTER")"
            echo "Restart policy: $(docker inspect --format '{{.HostConfig.RestartPolicy.Name}}' "$CONTAINER_FILTER")"
          else
            echo "Stats for all running containers (taking $STATS_COUNT samples)"
            # Collect stats for all containers
            docker stats --no-stream
            
            # If multiple stats samples requested
            if [ $STATS_COUNT -gt 1 ]; then
              for i in $(seq 2 $STATS_COUNT); do
                echo -e "\nSample $i:"
                sleep 2
                docker stats --no-stream
              done
            fi
          fi
      output:
        prefix: "Container Resource Usage:"

    - name: "container_logs"
      description: "Show logs from a container"
      params:
        container:
          type: string
          description: "Container name or ID"
          required: true
        lines:
          type: number
          description: "Number of log lines to show (default: 50)"
        follow:
          type: boolean
          description: "Follow log output (default: false)"
        since:
          type: string
          description: "Show logs since timestamp (e.g., '10m', '1h', '2h30m')"
      constraints:
        - "container.matches('^[a-zA-Z0-9_.-]+$')"                      # Safe container name/ID chars
        - "container.size() <= 64"                                       # Max container ID length
        - "int(lines) == 0 || (int(lines) >= 1 && int(lines) <= 1000)"                  # Reasonable line count
        - "since == '' || since.matches('^[0-9]+[smhd]$|^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$')"  # Valid time format
      run:
        command: |
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Error: Docker is not installed or not in the PATH."
            exit 1
          fi
          
          # Set defaults
          LINES_PARAM="--tail=50"
          FOLLOW_PARAM=""
          SINCE_PARAM=""
          
          if [ {{ .lines }} -gt 0 ]; then
            LINES_PARAM="--tail={{ .lines }}"
          fi
          
          if [ "{{ .follow }}" = "true" ]; then
            # Limit follow to 30 seconds max to prevent hanging
            FOLLOW_PARAM="--follow"
            timeout_cmd="timeout 30"
            if [[ "$(uname)" == "Darwin" ]]; then
              # macOS uses gtimeout from coreutils
              if command -v gtimeout &> /dev/null; then
                timeout_cmd="gtimeout 30"
              else
                # If gtimeout is not available, don't use timeout
                timeout_cmd=""
                echo "Note: Log following limited to 30 seconds (install coreutils for better control)"
              fi
            fi
          fi
          
          if [ -n "{{ .since }}" ]; then
            SINCE_PARAM="--since={{ .since }}"
          fi
          
          # Verify container exists
          if ! docker ps -a --format "{{.Names}}:{{.ID}}" | grep -q "{{ .container }}"; then
            echo "Error: Container '{{ .container }}' not found."
            echo "Available containers:"
            docker ps -a --format "table {{.Names}}\t{{.ID}}\t{{.Status}}"
            exit 1
          fi
          
          echo "Container: {{ .container }}"
          echo "Status: $(docker inspect --format '{{.State.Status}}' {{ .container }})"
          echo "Created: $(docker inspect --format '{{.Created}}' {{ .container }})"
          echo "Image: $(docker inspect --format '{{.Config.Image}}' {{ .container }})"
          echo -e "Displaying logs with params: $LINES_PARAM $FOLLOW_PARAM $SINCE_PARAM\n"
          
          if [ -n "$FOLLOW_PARAM" ] && [ -n "$timeout_cmd" ]; then
            $timeout_cmd docker logs $LINES_PARAM $FOLLOW_PARAM $SINCE_PARAM {{ .container }}
          else
            docker logs $LINES_PARAM $FOLLOW_PARAM $SINCE_PARAM {{ .container }}
          fi
          
      output:
        prefix: "Container Logs for {{ .container }}:"

    - name: "container_inspect"
      description: "Show detailed information about a container"
      params:
        container:
          type: string
          description: "Container name or ID"
          required: true
        format:
          type: string
          description: "Output format: 'full' (default), 'network', 'mounts', 'env', or 'config'"
      constraints:
        - "container.matches('^[a-zA-Z0-9_.-]+$')"                      # Safe container name/ID chars
        - "container.size() <= 64"                                       # Max container ID length
        - "format == '' || ['full', 'network', 'mounts', 'env', 'config'].exists(f, f == format)"  # Valid formats
      run:
        command: |
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Error: Docker is not installed or not in the PATH."
            exit 1
          fi
          
          # Set default format
          FORMAT="{{ .format }}"
          if [ -z "$FORMAT" ]; then
            FORMAT="full"
          fi
          
          # Verify container exists
          if ! docker ps -a --format "{{.Names}}:{{.ID}}" | grep -q "{{ .container }}"; then
            echo "Error: Container '{{ .container }}' not found."
            echo "Available containers:"
            docker ps -a --format "table {{.Names}}\t{{.ID}}\t{{.Status}}"
            exit 1
          fi
          
          echo "Container: {{ .container }}"
          
          case "$FORMAT" in
            "network")
              echo -e "\nNetwork Configuration:"
              docker inspect --format '{{json .NetworkSettings}}' {{ .container }} | jq
              
              echo -e "\nNetwork Mode:"
              docker inspect --format '{{.HostConfig.NetworkMode}}' {{ .container }}
              
              echo -e "\nPorts:"
              docker inspect --format '{{json .NetworkSettings.Ports}}' {{ .container }} | jq
              ;;
              
            "mounts")
              echo -e "\nVolumes and Mounts:"
              docker inspect --format '{{json .Mounts}}' {{ .container }} | jq
              
              echo -e "\nVolume Configuration:"
              docker inspect --format '{{json .Config.Volumes}}' {{ .container }} | jq
              ;;
              
            "env")
              echo -e "\nEnvironment Variables:"
              docker inspect --format '{{range .Config.Env}}{{println .}}{{end}}' {{ .container }}
              ;;
              
            "config")
              echo -e "\nContainer Configuration:"
              docker inspect --format '{{json .Config}}' {{ .container }} | jq
              ;;
              
            "full"|*)
              echo -e "\nFull Container Inspection (may be lengthy):"
              docker inspect {{ .container }} | jq
              ;;
          esac
      output:
        prefix: "Container Inspection for {{ .container }}:"

    - name: "docker_networks"
      description: "Show Docker network configuration and connected containers"
      params:
        network:
          type: string
          description: "Network name or ID (optional, shows all if not specified)"
      constraints:
        - "network == '' || network.matches('^[a-zA-Z0-9_.-]+$')"       # Safe network name/ID chars
        - "network.size() <= 64"                                         # Reasonable network name length
      run:
        command: |
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Error: Docker is not installed or not in the PATH."
            exit 1
          fi
          
          if [ -n "{{ .network }}" ]; then
            # Verify network exists
            if ! docker network ls --format "{{.Name}}:{{.ID}}" | grep -q "{{ .network }}"; then
              echo "Error: Network '{{ .network }}' not found."
              echo "Available networks:"
              docker network ls
              exit 1
            fi
            
            echo "Network details for: {{ .network }}"
            docker network inspect {{ .network }}
          else
            echo "Available Docker networks:"
            docker network ls
            
            echo -e "\nNetworks with connected containers:"
            for net in $(docker network ls --format "{{.Name}}"); do
              container_count=$(docker network inspect $net --format '{{len .Containers}}')
              if [ "$container_count" -gt 0 ]; then
                echo -e "\nNetwork: $net (Containers: $container_count)"
                docker network inspect $net --format '{{range $id, $container := .Containers}}{{printf "- %s (%s)\n" $container.Name $id}}{{end}}'
              fi
            done
          fi
      output:
        prefix: "Docker Network Configuration:"

    - name: "docker_volumes"
      description: "Show Docker volume information and usage"
      params:
        volume:
          type: string
          description: "Volume name or ID (optional, shows all if not specified)"
      constraints:
        - "volume == '' || volume.matches('^[a-zA-Z0-9_.-]+$')"       # Safe volume name/ID chars
        - "volume.size() <= 64"                                        # Reasonable volume name length
      run:
        command: |
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Error: Docker is not installed or not in the PATH."
            exit 1
          fi
          
          if [ -n "{{ .volume }}" ]; then
            # Verify volume exists
            if ! docker volume ls --format "{{.Name}}:{{.Driver}}" | grep -q "{{ .volume }}"; then
              echo "Error: Volume '{{ .volume }}' not found."
              echo "Available volumes:"
              docker volume ls
              exit 1
            fi
            
            echo "Volume details for: {{ .volume }}"
            docker volume inspect {{ .volume }}
            
            # Find containers using this volume
            echo -e "\nContainers using this volume:"
            found=false
            for container in $(docker ps -a --format "{{.Names}}"); do
              if docker inspect --format '{{range .Mounts}}{{if and (eq .Type "volume") (eq .Name "{{ .volume }}")}}{{$.Name}}{{end}}{{end}}' "$container" | grep -q .; then
                echo "- $container"
                found=true
              fi
            done
            
            if ! $found; then
              echo "No containers currently using this volume."
            fi
          else
            echo "Available Docker volumes:"
            docker volume ls
            
            echo -e "\nVolume details:"
            for vol in $(docker volume ls --format "{{.Name}}" | head -5); do
              echo -e "\nVolume: $vol"
              docker volume inspect $vol
            done
            
            if [ "$(docker volume ls -q | wc -l)" -gt 5 ]; then
              echo -e "\n(Only showing first 5 volumes. Specify a volume name for details on a specific volume.)"
            fi
          fi
      output:
        prefix: "Docker Volume Information:" 